### MODULES

# Algebra
[Let, Suppose, Given] {equality}. What is {variable}? ### _ {equality}. _ {variable}?
[Let, Suppose, Given] {equality}. [Calculate, Compute, Find] {variable}. ### _ {equality}. _ {variable}.
What is {variable} in {equality}? ### _ {variable} _ {equality}?
Solve {equality} for {variable}. ### _ {equality} _ {variable}.
Find {variable} such that {equality}. ### _ {variable} _ {equality}.
[Find, Determine] {variable}, given that {equality}. ### _ {variable}, _ {equality}.
[Find, Determine] {variable} so that {equality}. ### _ {variable} _ {equality}.
Solve {equality}. ### _ {equality}.

Factor {expression}. ### _ {expression}.
Factor {expression} as fully as possible. ### _ {expression} _
Factor the following polynomial {expression}. ### _ {expression}.
Take the expression {expression} and factor it. ### _ {expression} _
Convert {expression} into a product of factors. ### _ {expression} _
[Write, Rewrite] {expression} as a product of factors. ### _ {expression} _

Solve {equations} for {variable}. ### _ {equations} _ {variable}.
Solve {equations}. ### _ {equations}.
Find the value of {variable} in {equations}. ### _ {variable} _ {equations}.
What is {variable} in {equations}? ### _ {variable} _ {equations}?
Solve {equations} and find the value of {variable}. ### _ {equations} _ {variable}.
Let {equations} and find what {variable} equals to. ### _ {equations} _ {variable} _
What is the value of {variable} for {equations} to hold true? ### _ {variable} _ {equations} _
Solve for {variable} so that {equations} to hold true. ### _ {variable} _ {equations} _

Suppose {equations}. ### _ {equations}.

What is next in {sequence}? ### _ {sequence}?
What comes next: {sequence}? ### _ {sequence}?
What is the next [term, item, element] in {sequence}? ### _ {sequence}?
Following the pattern in {sequence}, what comes next? ### _ {sequence}, _
Continue {sequence} and give the next term. ### _ {sequence} _
Take the sequence {sequence}. What comes next? ### _ {sequence}. _
Take the sequence {sequence}. What is the next term? ### _ {sequence}. _

What is the {variable}'th term of {sequence}? ### _ {variable}'th _ {sequence}?
Take the sequence {sequence}. What is the {variable}'th term? ### _ {sequence}. _ {variable}'th _
What term is at position {variable} in the sequence {sequence}? ### _ {variable} _ {sequence}?
Give the value for the item at position {variable} in the sequence {sequence}. ### _ {variable} _ {sequence}.
Find an expression for the {variable}'th term of {sequence}. ### _ {variable}'th _ {sequence}.
Find the closed expression for the term at position {variable} in {sequence}. ### _ {variable} _ {sequence}.
Following the pattern in {sequence}, what is {variable}'th term? ### _ {sequence}, _ {variable}'th _
Given the sequence {sequence}, what is the {variable}'th term? ### _ {sequence}, _ {variable}'th _

# Arithmetic
{p} + {q} ### {p} _ {q}
{p}+{q} ### {p}+{q}
[Work out, Calculate, Compute] {p} [+, plus] {q}. ### _ {p} _ {q}.
[Add, Put together, Sum, Add together] {p} and {q}. ### _ {p} _ {q}.
Total of {p} and {q}. ### _ {p} _ {q}.
What is {p} [+, plus] {q}? ### _ {p} _ {q}?

Let {self} = {p} * {q}. ### _ {self} _ {p} _ {q}.
Let {self} = {p} + {q}. ### _ {self} _ {p} _ {q}.

{p} - {q} ### {p} _ {q}
{p}-{q} ### {p}-{q}
[Calculate, Compute, Work out] {p} [-, minus] {q}. ### _ {p} _ {q}.
What is {p} [-, minus, take away] {q}? ### _ {p} _ {q}?
What is {q} [less than, subtracted from] {p}? ### _ {q} _ {p}?
[Subtract, Remove, Take away] {q} from {p}. ### _ {q} _ {p}.

distance ### _
difference ### _
{p} and {q} ### {p} _ {q}
{q} and {p} ### {q} _ {p}
What is the {} between {}? ### _ {} _ {}?
Let {self} = {p} - {q}. ### _ {self} _ {p} _ {q}.

[In, Using, Working in] base {base}, what is {p} [+, plus] {q}? ### _ {base}, _ {p} _ {q}?
In base {base}, [compute, calculate] {p} [+, plus] {q}. ### _ {base}, _ {p} _ {q}.
Use and answer in base {base}. What is {p} [+, plus] {q}? ### _ {base}. _ {p} _ {q}?
Use base {base} for the following problem: what is {p} [+, plus] {q}? ### _ {base} _ {p} _ {q}?
[Compute, Calculate, Work out] {p} [+, plus] {q} using base {base}. ### _ {p} _ {q} _ {base}.

[In, Using, Working in] base {base}, what is {p} [-, minus] {q}? ### _ {base}, _ {p} _ {q}?
In base {base}, [compute, calculate] {p} [-, minus] {q}. ### _ {base}, _ {p} _ {q}.
Use and answer in base {base}. What is {p} [-, minus] {q}? ### _ {base}. _ {p} _ {q}?
Use base {base} for the following problem: what is {p} [-, minus] {q}? ### _ {base} _ {p} _ {q}?
[Compute, Calculate, Work out] {p} [-, minus] {q} using base {base}. ### _ {p} _ {q} _ {base}.

{p}{ops.MUL_SYMBOL}{q} ### {p}{ops.MUL_SYMBOL}{q}
{p} {ops.MUL_SYMBOL} {q} ### {p} {ops.MUL_SYMBOL} {q}
Calculate {p}{ops.MUL_SYMBOL}{q}. ### _ {p}{ops.MUL_SYMBOL}{q}.
Work out {p} {ops.MUL_SYMBOL} {q}. ### _ {p} {ops.MUL_SYMBOL} {q}.
Multiply {p} and {q}. ### _ {p} _ {q}.
Product of {p} and {q}. ### _ {p} _ {q}.
What is the product of {p} and {q}? ### _ {p} _ {q}?
{p} times {q} ### {p} _ {q}
What is {p} times {q}? ### _ {p} _ {q}?

{p} / {q} ### {p} _ {q}
{p} รท {q} ### {p} _ {q}
Divide {p} by {q}. ### _ {p} _ {q}.
{p} divided by {q} ### {p} _ {q}
What is {p} divided by {q}? ### _ {p} _ {q}?
[Calculate, Compute, Work out] {p} divided by {q}. ### _ {p} _ {q}.
{q} times what equals {p}? ### {q} _ {p}?

Let {self} be {p} divided by {q}. ### _ {self} _ {p} _ {q}.

What is {value} [^, to the power of] 1/{one_over_exponent}, to the nearest integer? ### _ {value} _
[Compute, Calculate, Work out] {value} [^, to the power of] 1/{one_over_exponent} to the nearest integer. ### _ {value} _
What is {value} multiplied by itself 1/{one_over_exponent} times, to the nearest integer? ### _ {value} _
[Compute, Calculate, Work out] {value} multiplied by itself 1/{one_over_exponent} times to the nearest integer. ### _ {value} _

What is the {ordinal} root of {value} to the nearest integer? ### _ {ordinal} _ {value} _
[Find, Compute, Calculate, Work out] the {ordinal} root of {value} to the nearest integer. ### _ {ordinal} _ {value} _

What is the square root of {value} to the nearest integer? ### _ {value} _
[Compute, Evaluate, Calculate, Work out, Find] the square root of {value} to the nearest integer. ### _ {value} _

What is the cube root of {value} to the nearest integer? ### _ {value} _
[Compute, Evaluate, Calculate, Work out, Find] the cube root of {value} to the nearest integer. ### _ {value} _

{op} ### {op}
What is {op}? ### _ {op}?
[Evaluate, Calculate, Compute, Work out] {op}. ### _ {op}.
What is the value of {op}? ### _ {op}?

Let {self} be {op}. ### _ {self} _ {op}.

Simplify {exp}. ### _ {exp}.
Simplify {exp} [as far as possible, completely, fully]. ### _ {exp} _
Completely simplify {exp}. ### _ {exp}.
Completely simplify the following expression: {exp}. ### _ {exp}.
[Write, Rewrite] {exp} in its simplest form. ### _ {exp} _
[Write, Rewrite] {exp} as simply as possible. ### _ {exp} _
Simplify the following expression: {exp}. ### _ {exp}.

# Calculus
Find the {nth} derivative of {eq} wrt {var}. ### _ {nth} _ {eq} _ {var}.
What is the {nth} derivative of {eq} wrt {var}? ### _ {nth} _ {eq} _ {var}?
Differentiate {eq} with respect to {var}. ### _ {eq} _ {var}.
Differentiate {eq} wrt {var}. ### _ {eq} _ {var}.
What is the derivative of {eq} wrt {var}? ### _ {eq} _ {var}?
Find the {nth} derivative of {eq}. ### _ {nth} _ {eq}.
What is the {nth} derivative of {eq}? ### _ {nth} _ {eq}?
Differentiate {eq}. ### _ {eq}.
What is the derivative of {eq}? ### _ {eq}?
Let {fn}({variables}) be the {nth} derivative of {eq}. ### _ {fn}({variables}) _ {nth} _ {eq}.

# Comparisons
Which is [bigger, greater, larger]: {left} or {right}? ### _ {left} _ {right}?
[Between, Of, Comparing] {left} and {right}, which is [bigger, greater, larger]? ### _ {left} _ {right}, _
Is {left} or {right} [bigger, greater, larger]? ### _ {left} _ {right} _
Comparing {left} and {right}, which has the [biggest, greatest, largest] value? ### _ {left} _ {right}, _

Which is smaller: {left} or {right}? ### _ {left} _ {right}?
[Between, Of, Comparing] {left} and {right}, which is smaller? ### _ {left} _ {right}, _
Is {left} or {right} smaller? ### _ {left} _ {right} _
Comparing {left} and {right}, which has the [lowest, smallest] value? ### _ {left} _ {right}, _

Is {left} {ops.LT_SYMBOL} {right}? ### _ {left} {ops.LT_SYMBOL} {right}?
Is {left} [less, smaller] than {right}? ### _ {left} _ {right}?

Is {left} {ops.LE_SYMBOL} {right}? ### _ {left} {ops.LE_SYMBOL} {right}?
Is {left} less than or equal to {right}? ### _ {left} _ {right}?
Is {left} [at most, at most as big as] {right}? ### _ {left} _ {right}?

Is {left} {ops.GT_SYMBOL} {right}? ### _ {left} {ops.GT_SYMBOL} {right}?
Is {left} [greater, bigger] than {right}? ### _ {left} _ {right}?

Is {left} {ops.GE_SYMBOL} {right}? ### _ {left} {ops.GE_SYMBOL} {right}?
Is {left} greater than or equal to {right}? ### _ {left} _ {right}?
Is {left} [at least, at least as big as] {right}? ### _ {left} _ {right}?

Does {left} {ops.EQ_SYMBOL} {right}? ### _ {left} {ops.EQ_SYMBOL} {right}?
Are {left} and {right} equal? ### _ {left} _ {right} _
Is {left} equal to {right}? ### _ {left} _ {right}?
Do {left} and {right} have the same value? ### _ {left} _ {right} _

Is {left} {ops.NE_SYMBOL} {right}? ### _ {left} {ops.NE_SYMBOL} {right}?
Is {left} not equal to {right}? ### _ {left} _ {right}?
Are {left} and {right} [unequal, nonequal, non-equal]? ### _ {left} _ {right} _
Do {left} and {right} have different values? ### _ {left} _ {right} _

What is the {adjective} value in {values_template}? ### _ {adjective} _ {values_template}?
Which is the {adjective} value? ### _ {adjective} _

biggest ### _
smallest ### _

What is the {adjective} to {target} in {values_template}? ### _ {adjective} _ {target} _ {values_template}?
Which is the {adjective} to {target}? ### _ {adjective} _ {target}?

closest ### _
nearest ### _

[Sort, Put, Place] {unsorted_template} in {direction} order. ### _ {unsorted_template} _ {direction} _
[Sort, Order] {unsorted_template}. ### _ {unsorted_template}.
Sort {unsorted_template}. ### _ {unsorted_template}.

ascending ### _
increasing ### _
descending ### _
decreasing ### _

# Measurement
meter ### _
kilometer ### _
centimeter ### _
millimeter ### _
micrometer ### _
nanometer ### _

meters ### _
kilometers ### _
centimeters ### _
millimeters ### _
micrometers ### _
nanometers ### _

second ### _
minute ### _
hour ### _
day ### _
week ### _
millisecond ### _
microsecond ### _
nanosecond ### _

seconds ### _
minutes ### _
hours ### _
days ### _
weeks ### _
milliseconds ### _
microseconds ### _
nanoseconds ### _

year ### _
decade ### _
century ### _
millennium ### _
month ### _

years ### _
decades ### _
centuries ### _
millennia ### _
months ### _

kilogram ### _
tonne ### _
gram ### _
milligram ### _
microgram ### _
nanogram ### _

kilograms ### _
tonnes ### _
grams ### _
milligrams ### _
micrograms ### _
nanograms ### _

litre ### _
millilitre ### _

litres ### _
millilitres ### _

How many {target_name} [are there, fit, can fit] in {base_value} {base_name}? ### _ {target_name} _ {base_value} {base_name}?
What is {base_value} {base_name} in {target_name}? ### _ {base_value} {base_name} _ {target_name}?
[Convert, Rewrite, Transform, Translate] {base_value} {base_name} [to, into] {target_name}. ### _ {base_value} {base_name} _ {target_name}.
[Write, Express] {base_value} {base_name} in {target_name}. ### _ {base_value} {base_name} _ {target_name}.
Write {base_value} {base_name} expressed in {target_name}. ### _ {base_value} {base_name} _ {target_name}.

How many {target_name} [are there, fit, can fit] in {base_value} {base_symbol}? ### _ {target_name} _ {base_value} {base_symbol}?
What is {base_value} {base_symbol} in {target_name}? ### _ {base_value} {base_symbol} _ {target_name}?
[Convert, Rewrite, Transform, Translate] {base_value} {base_symbol} [to, into] {target_name}. ### _ {base_value} {base_symbol} _ {target_name}.
[Write, Express] {base_value} {base_symbol} in {target_name}. ### _ {base_value} {base_symbol} _ {target_name}.
Write {base_value} {base_symbol} expressed in {target_name}. ### _ {base_value} {base_symbol} _ {target_name}.

How many {target_name} [are there, fit, can fit] in {base_value} of a {base_name}? ### _ {target_name} _ {base_value} _ {base_name}?
What is {base_value} of a {base_name} in {target_name}? ### _ {base_value} _ {base_name} _ {target_name}?
[Write, Express] {base_value} of a {base_name} in {target_name}. ### _ {base_value} _ {base_name} _ {target_name}.

AM ### _
PM ### _

What time is it {duration} minutes before {end}? ### _ {duration} _ {end}?
What is the time {duration} minutes before {end}? ### _ {duration} _ {end}?
[Find, Work out, Compute, Calculate] the time {duration} minutes before {end}. ### _ {duration} _ {end}.
What was {end} {duration} minutes earlier? ### _ {end} {duration} _

What time is it {duration} minutes after {start}? ### _ {duration} _ {start}?
What is the time {duration} minutes after {start}? ### _ {duration} _ {start}?
[Find, Work out, Compute, Calculate] the time {duration} minutes after {start}. ### _ {duration} _ {start}.
What will {start} be {duration} minutes later? ### _ {start} _ {duration} _

How many minutes [are there, fit, can fit] between {start} and {end}? ### _ {start} _ {end}?
[Write, Work out, Compute, Calculate, Express, Find] the number of minutes between {start} and {end}. ### _ {start} _ {end}.

# Numbers

True ### _
False ### _

ten  ### _
hundred  ### _
thousands ### _
millions ### _
billions ### _
trillions ### _
quadrillions ### _
quintillions ### _
sextillions ### _
septillions ### _
octillions ### _
nonillions ### _
decillions ### _

10 ### _
100 ### _
1000 ### _
10000 ### _
100000 ### _
1000000 ### _
10000000 ### _
100000000 ### _

units ### _
tens ### _
hundreds ### _

What is the {place_name} digit of {integer}? ### _ {place_name} _ {integer}?

the nearest {round_to} ### _ {round_to}
the nearest integer ### _
{dps} decimal place ### {dps} _
{dps} dp ### {dps} _
{dps} decimal places ### {dps} _
{dps} dps ### {dps} _

Round {input} to {description}. ### _ {input} _ {description}.
What is {input} rounded to {description}? ### _ {input} _ {description}?
Take {input} and round it to {description}. ### _ {input} _ {description}.

composite ### _
a composite number ### _
prime ### _
a prime number ### _

Is {integer} {attribute}? ### _ {integer} {attribute}?

Is {maybe_factor} a [factor, multiple] of {value}? ### _ {maybe_factor} _ {value}?
Is {maybe_factor} one of the factors of {value}? ### _ {maybe_factor} _ {value}?
Does {maybe_factor} divide {value}? ### _ {maybe_factor} _ {value}?
Does {value} divided by {maybe_factor} yield a whole number? ### _ {value} _ {maybe_factor} _
Can {maybe_factor} divide {value}? ### _ {maybe_factor} _ {value}?
Is it possible for {maybe_factor} to divide {value}? ### _ {maybe_factor} _ {value}?

Is {value} even? ### _ {value} _

What are the prime factors of {integer}? ### _ {integer}?
[List, Find, Give, Provide, State] the prime factors of {integer}. ### _ {integer}.
Perform a prime factorisation of {integer} and list the result. ### _ {integer} _
What does a prime factorisation of {integer} yield? ### _ {integer} _
What are the prime numbers that {integer} is composed of? ### _ {integer} _

least ### _
lowest ### _
smallest ### _

[Calculate, Compute, Find, Work out, State, Give, Provide] the {adjective} common multiple of {p} and {q}. ### _ {adjective} _ {p} _ {q}.
What is the {adjective} common multiple of {p} and {q}? ### _ {adjective} _ {p} _ {q}?

What is the common denominator of {p} and {q}? ### _ {p} _ {q}?
[Find, Compute, Calculate, Find, Work out] the common denominator of {p} and {q}. ### _ {p} _ {q}.

greatest ### _
highest ### _
common ### _
divisor ### _
factor ### _

[Calculate, Compute, Find, Work out, State, Give, Provide] the {adjective} of {p} and {q}. ### _ {adjective} _ {p} _ {q}.
What is the {adjective} of {p} and {q}? ### _ {adjective} _ {p} _ {q}?

Let {self} be the {adjective} of {p} and {q}. ### _ {self} _ {adjective} _ {p} _ {q}.

[Calculate, Compute, Find, Work out, State, Give] the remainder when {p} is divided by {q}. ### _ {p} _ {q}.
What is the remainder when {p} is divided by {q}? ### _ {p} _ {q}?

Let {self} be the remainder when {p} is divided by {q}. ### _ {self} _ {p} _ {q}.

{from_str} (base {from_base}) to base {to_base} ### {from_str} _ {from_base}) _ {to_base}
[Convert, Transform, Translate] {from_str} (base {from_base}) to base {to_base}. ### _ {from_str} _ {from_base}) _ {to_base}.
[Write, Rewrite, Give, Express] {from_str} (base {from_base}) in base {to_base}. ### _ {from_str} _ {from_base}) _ {to_base}.
What is {from_str} (base {from_base}) in base {to_base}? ### _ {from_str} _ {from_base}) _ {to_base}?

# Polynomials
Express {expression} as {canonical} and give {target}. ### _ {expression} _ {canonical} _ {target}.
Rearrange {expression} to {canonical} and give {target}. ### _ {expression} _ {canonical} _ {target}.
Express {expression} in the form {canonical} and give {target}. ### _ {expression} _ {canonical} _ {target}.
Rearrange {expression} to the form {canonical} and give {target}. ### _ {expression} _ {canonical} _ {target}.

What is {composed}? ### _ {composed}?
[Calculate, Give, Determine, Compute, Find, State] {composed}. ### _ {composed}.

Let {self} be {composed}. ### _ {self} _ {composed}.
Let {intermediate} = {composed}. ### _ {intermediate} _ {composed}.

Expand {expression}. ### _ {expression}.

Collect the terms in {unsimplified}. ### _ {unsimplified}.
Let {function} = {unsimplified}. ### _ {function} _ {unsimplified}.

Simplify {unsimplified} assuming {variable} is positive. ### _ {unsimplified} _ {variable} _

Simplify {unsimplified} assuming {variable} is positive. ### _ {unsimplified} _ {variable} _
Simplify {unsimplified} [as far as possible, completely, fully] assuming {variable} is positive. ### _ {unsimplified} _ {variable} _
Completely simplify {unsimplified} assuming {variable} is positive. ### _ {unsimplified} _ {variable} _
Completely simplify the following expression, assuming {variable} is positive: {unsimplified}. ### _ {variable} _ {unsimplified}.
[Write, Rewrite] {unsimplified} in its simplest form, assuming {variable} is positive. ### _ {unsimplified} _ {variable} _
[Write, Rewrite] {unsimplified} as simply as possible, assuming {variable} is positive. ### _ {unsimplified} _ {variable} _
Simplify the following expression, assuming {variable} is positive: {unsimplified}. ### _ {variable} _ {unsimplified}.

# Probability
pick ### _
picking ### _

the sequence is {sequence} ### _ {sequence}

letters picked without replacement from ### _

{random_variable_capitalize}. What is prob of {event}? ### {random_variable_capitalize}. _ {event}?
{random_variable_capitalize}. [Calculate, Give, Determine, Compute, Find, State] prob of {event}. ### {random_variable_capitalize}. _ {event}.
What is prob of {event} when {random_variable}? ### _ {event} _ {random_variable}?
[Calculate, Give, Determine, Compute, Find, State] prob of {event} when {random_variable}. ### _ {event} _ {random_variable}.

# Answer Templates
Answer: ### _
The answer is: ### _
The correct answer is: ### _
The answer is ### _
The correct answer is ### _

### UTIL

# Composition
Let {function} = {polynomial}. ### _ {function} _ {polynomial}.

# Display
zero ### _
one ### _
two ### _
three ### _
four ### _
five ### _
six ### _
seven ### _
eight ### _
nine ### _
ten ### _
eleven ### _
twelve ### _
thirteen ### _
fourteeen ### _
fifteen ### _
sixteen ### _
seventeen ### _
eighteen ### _
nineteen ### _

twenty ### _
thirty ### _
fourty ### _
fifty ### _
sixty ### _
seventy ### _
eighty ### _
ninety ### _

trillion ### _
billion ### _
million ### _
thousand ### _
hundred ### _

half ### _
third ### _
quarter ### _
fifth ### _
sixth ### _
seventh ### _
eighth ### _
ninth ### _
tenth ### _
eleventh ### _
twelth ### _
thirteenth ### _
fourteenth ### _
fifteenth ### _
sixteenth ### _
seventeenth ### _
eighteenth ### _
nineteenth ### _
twentieth ### _

halves ### _
thirds ### _
quarters ### _
fifths ### _
sixths ### _
sevenths ### _
eighths ### _
ninths ### _
tenths ### _
elevenths ### _
twelths ### _
thirteenths ### _
fourteenths ### _
fifteenths ### _
sixteenths ### _
seventeenths ### _
eighteenths ### _
nineteenths ### _
twentieths ### _

!ORDINALS! zeroth ### _
!ORDINALS! first ### _
!ORDINALS! second ### _
!ORDINALS! third ### _
!ORDINALS! fourth ### _
!ORDINALS! fifth ### _
!ORDINALS! sixth ### _
!ORDINALS! seventh ### _
!ORDINALS! eighth ### _
!ORDINALS! ninth ### _
!ORDINALS! tenth ### _
!ORDINALS! eleventh ### _
!ORDINALS! twelth ### _
!ORDINALS! thirteenth ### _
!ORDINALS! fourteenth ### _
!ORDINALS! fifteenth ### _
!ORDINALS! sixteenth ### _
!ORDINALS! seventeenth ### _
!ORDINALS! eighteenth ### _
!ORDINALS! nineteenth ### _
!ORDINALS! twentieth ### _

and ### _